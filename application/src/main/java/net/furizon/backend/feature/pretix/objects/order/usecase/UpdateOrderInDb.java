package net.furizon.backend.feature.pretix.objects.order.usecase;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.furizon.backend.feature.membership.action.createMembershipCard.CreateMembershipCardAction;
import net.furizon.backend.feature.membership.action.updateMembershipOwner.UpdateMembershipCardOwner;
import net.furizon.backend.feature.membership.dto.MembershipCard;
import net.furizon.backend.feature.membership.finder.MembershipCardFinder;
import net.furizon.backend.feature.pretix.objects.event.Event;
import net.furizon.backend.feature.pretix.objects.order.Order;
import net.furizon.backend.feature.pretix.objects.order.PretixOrder;
import net.furizon.backend.feature.pretix.objects.order.action.deleteOrder.DeleteOrderAction;
import net.furizon.backend.feature.pretix.objects.order.action.upsertOrder.UpsertOrderAction;
import net.furizon.backend.infrastructure.pretix.model.OrderStatus;
import net.furizon.backend.infrastructure.pretix.service.PretixInformation;
import org.jetbrains.annotations.NotNull;
import org.springframework.stereotype.Component;

import java.util.Optional;

@Component
@RequiredArgsConstructor
@Slf4j
public class UpdateOrderInDb {
    @NotNull private final UpsertOrderAction upsertOrderAction;
    @NotNull private final DeleteOrderAction deleteOrderAction;
    @NotNull private final MembershipCardFinder membershipCardFinder;
    @NotNull private final UpdateMembershipCardOwner updateMembershipCardOwner;
    @NotNull private final CreateMembershipCardAction createMembershipCardAction;

    public @NotNull Optional<Order> execute(@NotNull PretixOrder pretixOrder,
                                             @NotNull Event event,
                                             @NotNull PretixInformation pretixInformation) {
        Order order = null;
        boolean shouldDelete = true;

        var orderOpt = pretixInformation.parseOrder(pretixOrder, event);
        if (orderOpt.isPresent()) {
            order = orderOpt.get();
            OrderStatus os = order.getOrderStatus();
            if (os == OrderStatus.PENDING || os == OrderStatus.PAID) {
                log.debug("[PRETIX] Storing / Updating order: {}@{}", pretixOrder.getCode(), event.getSlug());
                upsertOrderAction.invoke(order, pretixInformation);

                // GENERATE MEMBERSHIP CARD LOGIC
                Long orderOwnerId = order.getOrderOwnerUserId();
                if (orderOwnerId != null) {
                    MembershipCard card = membershipCardFinder.getMembershipCardByOrderId(order.getId());

                    if (card == null) { // No membership card has been generated by this order
                        log.info("[PRETIX] Generating new membership card for user {}", orderOwnerId);
                        createMembershipCardAction.invoke(orderOwnerId, event, order);

                    } else { //A membership card was already created with this order
                        Long cardOwnerId = card.getCreatedForOrderId();

                        if (cardOwnerId != null && !cardOwnerId.equals(orderOwnerId)) { //Order owner has changed
                            if (!card.isRegistered()) { //If the card was not registered yet, we can change the owners
                                log.warn("[PRETIX] Order {} has already generated the membeship card {}/{}. "
                                        + "However, the order owner has changed ({} -> {}) and, since the card "
                                        + "was not registered yet, the card's owner is now changed as well",
                                    order.getCode(),
                                    card.getCardId(), card.getIdInYear(),
                                    cardOwnerId, orderOwnerId
                                );
                                updateMembershipCardOwner.invoke(card, orderOwnerId);

                            } else { //Otherwise, send an error email to web admins
                                log.error("[PRETIX] [PRETIX] Order {} has already generated the membeship card {}/{}. "
                                        + "Order owner has changed ({} -> {}), "
                                        + "but membership card was already registered!!"
                                        + "Manual fix is needed!!! +++",
                                    order.getCode(),
                                    card.getCardId(), card.getIdInYear(),
                                    cardOwnerId, orderOwnerId
                                );
                                //TODO SPAM EMAIL TO ADMINS
                            }
                        }
                    }
                }

                shouldDelete = false;
            } else {
                order = null;
            }
        } else {
            log.error("[PRETIX] Unable to parse order: {}@{}", pretixOrder.getCode(), event.getSlug());
        }

        if (shouldDelete) {
            deleteOrderAction.invoke(pretixOrder.getCode());
        }

        return Optional.ofNullable(order);
    }
}
