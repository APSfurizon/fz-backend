package net.furizon.backend.db.entities.pretix.settings;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.persistence.Transient;
import lombok.Getter;
import lombok.Setter;
import net.furizon.backend.db.entities.pretix.Event;

import java.util.HashMap;
import java.util.Map;

/**
 * Defines Pretix's current settings, from the organizer to the connection data
 */
@Entity
@Table
public final class PretixGeneralSettings {
    @Getter
    @Column(nullable = false)
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;

    @Getter
    @Setter
    @Column(nullable = false)
    private boolean enabled;

    @Getter
    @Column(nullable = false)
    private String apiKey;

    @Getter
    @Column(nullable = false)
    private String organizer;

    @Getter
    private String currentEvent; //Not needed to be saved in DB, obtained by the event table

    @Getter
    @Column(nullable = true)
    private String hostName;

    @Getter
    @Setter
    @Column(nullable = false)
    private boolean runHealthcheck;

    @Transient
    private Event currentEventObj;

    //Autogenerated
    @Transient
    private Map<String, String> connectionHeaders = null;

    @Getter
    @Transient
    private String baseUrl = null;

    @Getter
    @Transient
    private String eventUrl = null;

    public void setHostName(String hostName) {
        this.hostName = hostName;
        if (connectionHeaders == null) {
            getConnectionHeaders(); //This will create them
        }
        connectionHeaders.put("Host", hostName);
    }

    public void setApiKey(String apiKey) {
        this.apiKey = apiKey;
        if (connectionHeaders == null) {
            getConnectionHeaders(); //This will create them
        }
        connectionHeaders.put("Authorization", "Token " + apiKey);
    }

    public Map<String, String> getConnectionHeaders() {
        if (connectionHeaders == null) {
            connectionHeaders = new HashMap<>();
            connectionHeaders.put("Host", hostName);
            connectionHeaders.put("Authorization", "Token " + apiKey);
        }
        return connectionHeaders;
    }

    public void setEndpointUrl(String endpointUrl) {
        //TODO: Check if setters are automatically called when data is loaded from db
        if (!endpointUrl.endsWith("/")) {
            endpointUrl += "/";
        }
        baseUrl = endpointUrl + "api/v1/";
        generateEventUrl();
    }

    public void setOrganizer(String organizer) {
        this.organizer = organizer;
        generateEventUrl();
    }

    public void setCurrentEvent(String currentEvent) {
        this.currentEvent = currentEvent;
        this.currentEventObj = null;
        generateEventUrl();
    }

    public Event getCurrentEventObj() {
        if (currentEventObj == null) {
            //TODO: Load from db
        }
        return currentEventObj;
    }

    private void generateEventUrl() {
        eventUrl = getBaseUrl() + "organizers/" + organizer + "/events/" + currentEvent + "/";
    }
}
