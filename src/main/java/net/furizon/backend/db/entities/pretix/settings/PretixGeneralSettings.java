package net.furizon.backend.db.entities.pretix.settings;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;

import java.util.HashMap;
import java.util.Map;

/**
 * Defines Pretix's current settings, from the organizer to the connection data
 */
@Entity @Table
public final class PretixGeneralSettings {

	@Getter @Column(nullable = false)
	@Id @GeneratedValue(strategy = GenerationType.IDENTITY)
	private long id;

	@Getter @Setter @Column(nullable = false)
	private boolean enabled;

	@Getter @Column(nullable = false)
	private String apiKey;

	@Getter @Column(nullable = false)
	private String organizer;

	@Getter @Column(nullable = true)
	private String currentEvent;

	@Getter @Column(nullable = true)
	private String hostName;

	@Getter @Setter @Column(nullable = false)
	private boolean runHealthcheck;

	//Autogenerated
	@Getter @Transient
	private Map<String, String> connectionHeaders = new HashMap<String, String>();

	@Getter @Transient
	private String baseUrl = null;

	@Getter @Transient
	private String eventUrl = null;

	public void setHostName(String hostName) {
		this.hostName = hostName;
		connectionHeaders.put("Host", hostName);
	}
	public void setApiKey(String apiKey) {
		this.apiKey = apiKey;
		connectionHeaders.put("Authorization", "Token " + apiKey);
	}

	public void setEndpointUrl(String endpointUrl) {
		//TODO: Check if setters are automatically called when data is loaded from db
		if(!endpointUrl.endsWith("/")) endpointUrl += "/";
		baseUrl = endpointUrl + "api/v1/";
		generateEventUrl();
	}

	public void setOrganizer(String organizer) {
		this.organizer = organizer;
		generateEventUrl();
	}

	public void setCurrentEvent(String currentEvent) {
		this.currentEvent = currentEvent;
		generateEventUrl();
	}

	private void generateEventUrl(){
		eventUrl = getBaseUrl() + "organizers/" + organizer + "/events/" + currentEvent + "/";
	}
}
