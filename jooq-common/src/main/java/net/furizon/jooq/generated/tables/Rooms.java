/*
 * This file is generated by jOOQ.
 */
package net.furizon.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import javax.annotation.processing.Generated;

import net.furizon.jooq.generated.Keys;
import net.furizon.jooq.generated.Public;
import net.furizon.jooq.generated.tables.Orders.OrdersPath;
import net.furizon.jooq.generated.tables.RoomGuests.RoomGuestsPath;

import org.jetbrains.annotations.Nullable;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.13"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Rooms extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.rooms</code>
     */
    public static final Rooms ROOMS = new Rooms();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.rooms.room_id</code>.
     */
    public final TableField<Record, Long> ROOM_ID = createField(DSL.name("room_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.rooms.room_confirmed</code>.
     */
    public final TableField<Record, Boolean> ROOM_CONFIRMED = createField(DSL.name("room_confirmed"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.rooms.room_name</code>.
     */
    public final TableField<Record, String> ROOM_NAME = createField(DSL.name("room_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.rooms.order_id</code>.
     */
    public final TableField<Record, Long> ORDER_ID = createField(DSL.name("order_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private Rooms(Name alias, Table<Record> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Rooms(Name alias, Table<Record> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.rooms</code> table reference
     */
    public Rooms(String alias) {
        this(DSL.name(alias), ROOMS);
    }

    /**
     * Create an aliased <code>public.rooms</code> table reference
     */
    public Rooms(Name alias) {
        this(alias, ROOMS);
    }

    /**
     * Create a <code>public.rooms</code> table reference
     */
    public Rooms() {
        this(DSL.name("rooms"), null);
    }

    public <O extends Record> Rooms(Table<O> path, ForeignKey<O, Record> childPath, InverseForeignKey<O, Record> parentPath) {
        super(path, childPath, parentPath, ROOMS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class RoomsPath extends Rooms implements Path<Record> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> RoomsPath(Table<O> path, ForeignKey<O, Record> childPath, InverseForeignKey<O, Record> parentPath) {
            super(path, childPath, parentPath);
        }
        private RoomsPath(Name alias, Table<Record> aliased) {
            super(alias, aliased);
        }

        @Override
        public RoomsPath as(String alias) {
            return new RoomsPath(DSL.name(alias), this);
        }

        @Override
        public RoomsPath as(Name alias) {
            return new RoomsPath(alias, this);
        }

        @Override
        public RoomsPath as(Table<?> alias) {
            return new RoomsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<Record, Long> getIdentity() {
        return (Identity<Record, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.ROOMS_PKEY;
    }

    @Override
    public List<UniqueKey<Record>> getUniqueKeys() {
        return Arrays.asList(Keys.ROOMS_ONLY_ONE_ORDER);
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.ROOMS__ROOMS_ORDERS_ID);
    }

    private transient OrdersPath _orders;

    /**
     * Get the implicit join path to the <code>public.orders</code> table.
     */
    public OrdersPath orders() {
        if (_orders == null)
            _orders = new OrdersPath(this, Keys.ROOMS__ROOMS_ORDERS_ID, null);

        return _orders;
    }

    private transient RoomGuestsPath _roomGuests;

    /**
     * Get the implicit to-many join path to the <code>public.room_guests</code>
     * table
     */
    public RoomGuestsPath roomGuests() {
        if (_roomGuests == null)
            _roomGuests = new RoomGuestsPath(this, null, Keys.ROOM_GUESTS__ROOM_GUESTS_ROOMS_FK.getInverseKey());

        return _roomGuests;
    }

    @Override
    public Rooms as(String alias) {
        return new Rooms(DSL.name(alias), this);
    }

    @Override
    public Rooms as(Name alias) {
        return new Rooms(alias, this);
    }

    @Override
    public Rooms as(Table<?> alias) {
        return new Rooms(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Rooms rename(String name) {
        return new Rooms(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rooms rename(Name name) {
        return new Rooms(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rooms rename(Table<?> name) {
        return new Rooms(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Rooms where(Condition condition) {
        return new Rooms(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Rooms where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Rooms where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Rooms where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Rooms where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Rooms where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Rooms where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Rooms where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Rooms whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Rooms whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
